{"ast":null,"code":"var _jsxFileName = \"/home/kirobaghdad/Documents/FWD_React_Final_Project/starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport BookList from \"./BookList\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Link, Route, Routes } from \"react-router-dom\";\nimport Search from \"./Search\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n\n  const getBooks = async () => {\n    const res = await BooksAPI.getAll();\n    return res;\n  }; // This function fetches the books from the server and categorize them according to their shelves\n\n\n  const categorizeBooks = books => {\n    setCurrentlyReading(books.filter(book => book.shelf === \"currentlyReading\"));\n    setWantToRead(books.filter(book => book.shelf === \"wantToRead\"));\n    setRead(books.filter(book => book.shelf === \"read\"));\n  };\n\n  useEffect(() => {\n    getBooks().then(function (res) {\n      categorizeBooks(res);\n    }).catch(() => {});\n  }, []); //This function changes the category of the given book to the newCategory\n\n  const changeCategory = (book, shelf, newCategory) => {\n    //Removing the book from the old category in the frontend\n    if (shelf === \"currentlyReading\") {\n      setCurrentlyReading(currentlyReading.filter(b => book.id !== b.id));\n    } else if (shelf === \"wantToRead\") {\n      setWantToRead(wantToRead.filter(b => book.id !== b.id));\n    } else if (shelf === \"read\") {\n      setRead(read.filter(b => book.id !== b.id));\n    } //Adding the book to the new category in the frontend\n\n\n    if (newCategory === \"currentlyReading\") {\n      setCurrentlyReading([...currentlyReading, book]);\n    } else if (newCategory === \"wantToRead\") {\n      setWantToRead([...wantToRead, book]);\n    } else if (newCategory === \"read\") {\n      setRead([...read, book]);\n    }\n\n    if (book.shelf !== \"none\") book.shelf = newCategory; //Updating the backend\n\n    BooksAPI.update(book, newCategory);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      element:\n      /*#__PURE__*/\n\n      /*Book Lists page*/\n      _jsxDEV(\"div\", {\n        className: \"list-books\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-books-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"MyReads\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"list-books-content\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\n            /*#__PURE__*/\n\n            /*Currently Reading book list*/\n            _jsxDEV(BookList, {\n              title: \"Currently Reading\",\n              books: currentlyReading,\n              changeCategory: changeCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 19\n            }, this),\n            /*#__PURE__*/\n\n            /*Want to Read book list*/\n            _jsxDEV(BookList, {\n              title: \"Want to Read\",\n              books: wantToRead,\n              changeCategory: changeCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 19\n            }, this),\n            /*#__PURE__*/\n\n            /*Read book list*/\n            _jsxDEV(BookList, {\n              title: \"Read\",\n              books: read,\n              changeCategory: changeCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"open-search\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/search\",\n            children: \"Add a Book!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"search\",\n      element:\n      /*#__PURE__*/\n\n      /*Search books page*/\n      _jsxDEV(Search, {\n        className: \"search\",\n        currentlyReading: currentlyReading,\n        read: read,\n        wantToRead: wantToRead,\n        changeCategory: changeCategory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YaNwzx1LyeAlWFDCS2t1OQg2lPo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kirobaghdad/Documents/FWD_React_Final_Project/starter/src/App.js"],"names":["useState","useEffect","BookList","BooksAPI","Link","Route","Routes","Search","App","currentlyReading","setCurrentlyReading","wantToRead","setWantToRead","read","setRead","getBooks","res","getAll","categorizeBooks","books","filter","book","shelf","then","catch","changeCategory","newCategory","b","id","update"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport BookList from \"./BookList\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport { Link, Route, Routes } from \"react-router-dom\";\nimport Search from \"./Search\";\n\nfunction App() {\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n\n  const getBooks = async () => {\n    const res = await BooksAPI.getAll();\n    return res;\n  };\n\n  // This function fetches the books from the server and categorize them according to their shelves\n  const categorizeBooks = (books) => {\n    setCurrentlyReading(\n      books.filter((book) => book.shelf === \"currentlyReading\")\n    );\n    setWantToRead(books.filter((book) => book.shelf === \"wantToRead\"));\n    setRead(books.filter((book) => book.shelf === \"read\"));\n  };\n\n  useEffect(() => {\n    getBooks()\n      .then(function (res) {\n        categorizeBooks(res);\n      })\n      .catch(() => {});\n  }, []);\n\n  //This function changes the category of the given book to the newCategory\n  const changeCategory = (book, shelf, newCategory) => {\n    //Removing the book from the old category in the frontend\n    if (shelf === \"currentlyReading\") {\n      setCurrentlyReading(currentlyReading.filter((b) => book.id !== b.id));\n    } else if (shelf === \"wantToRead\") {\n      setWantToRead(wantToRead.filter((b) => book.id !== b.id));\n    } else if (shelf === \"read\") {\n      setRead(read.filter((b) => book.id !== b.id));\n    }\n\n    //Adding the book to the new category in the frontend\n    if (newCategory === \"currentlyReading\") {\n      setCurrentlyReading([...currentlyReading, book]);\n    } else if (newCategory === \"wantToRead\") {\n      setWantToRead([...wantToRead, book]);\n    } else if (newCategory === \"read\") {\n      setRead([...read, book]);\n    }\n    if (book.shelf !== \"none\") book.shelf = newCategory;\n\n    //Updating the backend\n    BooksAPI.update(book, newCategory);\n  };\n\n  return (\n    <Routes>\n      <Route\n        exact\n        path=\"/\"\n        element={\n          /*Book Lists page*/\n          <div className=\"list-books\">\n            <div className=\"list-books-title\">\n              <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n              <div>\n                {\n                  /*Currently Reading book list*/\n                  <BookList\n                    title=\"Currently Reading\"\n                    books={currentlyReading}\n                    changeCategory={changeCategory}\n                  />\n                }\n                {\n                  /*Want to Read book list*/\n                  <BookList\n                    title=\"Want to Read\"\n                    books={wantToRead}\n                    changeCategory={changeCategory}\n                  />\n                }\n                {\n                  /*Read book list*/\n                  <BookList\n                    title=\"Read\"\n                    books={read}\n                    changeCategory={changeCategory}\n                  />\n                }\n              </div>\n            </div>\n\n            <div className=\"open-search\">\n              <Link to=\"/search\">Add a Book!</Link>\n            </div>\n          </div>\n        }\n      />\n      <Route\n        path=\"search\"\n        element={\n          /*Search books page*/\n          <Search\n            className=\"search\"\n            currentlyReading={currentlyReading}\n            read={read}\n            wantToRead={wantToRead}\n            changeCategory={changeCategory}\n          />\n        }\n      />\n    </Routes>\n  );\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}